{
	"info": {
		"_postman_id": "thai-location-api-collection",
		"name": "Thai Location API",
		"description": "A comprehensive collection for the Thai Location API - providing access to Thai geographic data including provinces, districts, and sub-districts.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "thai-location-api"
	},
	"item": [
		{
			"name": "Health Check",
			"item": [
				{
					"name": "API Health Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct status\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.status).to.eql(\"OK\");",
									"});",
									"",
									"pm.test(\"Response has message\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.message).to.include(\"Thai Location API\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Check if the API is running and healthy"
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/health",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"health"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"OK\",\n  \"message\": \"Thai Location API is running\"\n}"
						}
					]
				}
			],
			"description": "Health check endpoints to verify API status"
		},
		{
			"name": "Geographies",
			"item": [
				{
					"name": "Get All Geographies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success status\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.status).to.eql(\"success\");",
									"});",
									"",
									"pm.test(\"Response has data array\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Geography has required fields\", function () {",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.data.length > 0) {",
									"        const geography = responseJson.data[0];",
									"        pm.expect(geography).to.have.property('id');",
									"        pm.expect(geography).to.have.property('name');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{apiVersion}}/geographies",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{apiVersion}}",
								"geographies"
							]
						},
						"description": "Retrieve all Thai geographic regions (North, Central, Northeast, West, East, South)"
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/geographies",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"geographies"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"success\",\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"ภาคเหนือ\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"ภาคกลาง\"\n    }\n  ]\n}"
						}
					]
				}
			],
			"description": "Endpoints for Thai geographic regions"
		},
		{
			"name": "Provinces",
			"item": [
				{
					"name": "Get All Provinces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success status\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.status).to.eql(\"success\");",
									"});",
									"",
									"pm.test(\"Response has pagination\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('pagination');",
									"});",
									"",
									"pm.test(\"Province has required fields\", function () {",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.data.length > 0) {",
									"        const province = responseJson.data[0];",
									"        pm.expect(province).to.have.property('id');",
									"        pm.expect(province).to.have.property('name_th');",
									"        pm.expect(province).to.have.property('name_en');",
									"        pm.expect(province).to.have.property('geography_id');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{apiVersion}}/provinces?page=1&limit=20",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{apiVersion}}",
								"provinces"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "Page number"
								},
								{
									"key": "limit",
									"value": "20",
									"description": "Items per page (max: 100)"
								},
								{
									"key": "search",
									"value": "",
									"description": "Search by Thai or English name",
									"disabled": true
								},
								{
									"key": "geography_id",
									"value": "",
									"description": "Filter by geography ID",
									"disabled": true
								}
							]
						},
						"description": "Retrieve all Thai provinces with optional filtering and pagination"
					},
					"response": []
				},
				{
					"name": "Get Province by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success status\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.status).to.eql(\"success\");",
									"});",
									"",
									"pm.test(\"Province has correct ID\", function () {",
									"    const responseJson = pm.response.json();",
									"    const provinceId = pm.request.url.path[pm.request.url.path.length - 1];",
									"    pm.expect(responseJson.data.id).to.eql(parseInt(provinceId));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{apiVersion}}/provinces/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{apiVersion}}",
								"provinces",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "Province ID (1 = Bangkok)"
								}
							]
						},
						"description": "Retrieve a specific province by its ID"
					},
					"response": []
				},
				{
					"name": "Get Districts by Province ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success status\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.status).to.eql(\"success\");",
									"});",
									"",
									"pm.test(\"Districts belong to correct province\", function () {",
									"    const responseJson = pm.response.json();",
									"    const provinceId = pm.request.url.path[pm.request.url.path.indexOf('provinces') + 1];",
									"    if (responseJson.data.length > 0) {",
									"        responseJson.data.forEach(district => {",
									"            pm.expect(district.province_id).to.eql(parseInt(provinceId));",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{apiVersion}}/provinces/:id/districts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{apiVersion}}",
								"provinces",
								":id",
								"districts"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "Province ID (1 = Bangkok)"
								}
							]
						},
						"description": "Retrieve all districts within a specific province"
					},
					"response": []
				},
				{
					"name": "Search Provinces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Search returns relevant results\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.status).to.eql(\"success\");",
									"    pm.expect(responseJson.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{apiVersion}}/provinces?search=กรุงเทพ",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{apiVersion}}",
								"provinces"
							],
							"query": [
								{
									"key": "search",
									"value": "กรุงเทพ",
									"description": "Search for Bangkok in Thai"
								}
							]
						},
						"description": "Search provinces by Thai or English name"
					},
					"response": []
				}
			],
			"description": "Endpoints for Thai provinces (77 total)"
		},
		{
			"name": "Districts",
			"item": [
				{
					"name": "Get All Districts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success status\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.status).to.eql(\"success\");",
									"});",
									"",
									"pm.test(\"Response has pagination\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('pagination');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{apiVersion}}/districts?page=1&limit=20",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{apiVersion}}",
								"districts"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "province_id",
									"value": "",
									"description": "Filter by province ID",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"description": "Search by name",
									"disabled": true
								}
							]
						},
						"description": "Retrieve all districts with optional filtering and pagination"
					},
					"response": []
				},
				{
					"name": "Get District by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success status\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.status).to.eql(\"success\");",
									"});",
									"",
									"pm.test(\"District has correct ID\", function () {",
									"    const responseJson = pm.response.json();",
									"    const districtId = pm.request.url.path[pm.request.url.path.length - 1];",
									"    pm.expect(responseJson.data.id).to.eql(parseInt(districtId));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{apiVersion}}/districts/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{apiVersion}}",
								"districts",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "District ID"
								}
							]
						},
						"description": "Retrieve a specific district by its ID"
					},
					"response": []
				},
				{
					"name": "Get Sub-districts by District ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success status\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.status).to.eql(\"success\");",
									"});",
									"",
									"pm.test(\"Sub-districts belong to correct district\", function () {",
									"    const responseJson = pm.response.json();",
									"    const districtId = pm.request.url.path[pm.request.url.path.indexOf('districts') + 1];",
									"    if (responseJson.data.length > 0) {",
									"        responseJson.data.forEach(subdistrict => {",
									"            pm.expect(subdistrict.district_id).to.eql(parseInt(districtId));",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{apiVersion}}/districts/:id/subdistricts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{apiVersion}}",
								"districts",
								":id",
								"subdistricts"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "District ID"
								}
							]
						},
						"description": "Retrieve all sub-districts within a specific district"
					},
					"response": []
				}
			],
			"description": "Endpoints for Thai districts (Amphoe)"
		},
		{
			"name": "Sub-districts",
			"item": [
				{
					"name": "Get All Sub-districts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success status\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.status).to.eql(\"success\");",
									"});",
									"",
									"pm.test(\"Response has pagination\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('pagination');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{apiVersion}}/subdistricts?page=1&limit=20",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{apiVersion}}",
								"subdistricts"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "district_id",
									"value": "",
									"description": "Filter by district ID",
									"disabled": true
								},
								{
									"key": "zip_code",
									"value": "",
									"description": "Filter by postal code",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"description": "Search by name",
									"disabled": true
								}
							]
						},
						"description": "Retrieve all sub-districts with optional filtering and pagination"
					},
					"response": []
				},
				{
					"name": "Get Sub-district by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success status\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.status).to.eql(\"success\");",
									"});",
									"",
									"pm.test(\"Sub-district has correct ID\", function () {",
									"    const responseJson = pm.response.json();",
									"    const subdistrictId = pm.request.url.path[pm.request.url.path.length - 1];",
									"    pm.expect(responseJson.data.id).to.eql(parseInt(subdistrictId));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{apiVersion}}/subdistricts/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{apiVersion}}",
								"subdistricts",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "Sub-district ID"
								}
							]
						},
						"description": "Retrieve a specific sub-district by its ID"
					},
					"response": []
				},
				{
					"name": "Search by Zip Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success status\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.status).to.eql(\"success\");",
									"});",
									"",
									"pm.test(\"Results match zip code\", function () {",
									"    const responseJson = pm.response.json();",
									"    const searchZip = pm.request.url.query.find(q => q.key === 'zip_code').value;",
									"    if (responseJson.data.length > 0) {",
									"        responseJson.data.forEach(subdistrict => {",
									"            pm.expect(subdistrict.zip_code).to.eql(searchZip);",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{apiVersion}}/subdistricts?zip_code=10200",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{apiVersion}}",
								"subdistricts"
							],
							"query": [
								{
									"key": "zip_code",
									"value": "10200",
									"description": "Postal code (10200 = Bangkok areas)"
								}
							]
						},
						"description": "Search sub-districts by postal code"
					},
					"response": []
				},
				{
					"name": "Paginated Sub-districts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Pagination is correct\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.pagination.page).to.eql(1);",
									"    pm.expect(responseJson.pagination.limit).to.eql(10);",
									"    pm.expect(responseJson.data.length).to.be.at.most(10);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{apiVersion}}/subdistricts?page=1&limit=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{apiVersion}}",
								"subdistricts"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						},
						"description": "Example of paginated sub-districts with limit of 10 per page"
					},
					"response": []
				}
			],
			"description": "Endpoints for Thai sub-districts (Tambon)"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set default values if not already set",
					"if (!pm.environment.get('baseUrl')) {",
					"    pm.environment.set('baseUrl', 'http://localhost:3000');",
					"}",
					"",
					"if (!pm.environment.get('apiVersion')) {",
					"    pm.environment.set('apiVersion', 'v1');",
					"}",
					"",
					"// Add timestamp for request tracking",
					"pm.environment.set('requestTimestamp', new Date().toISOString());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global tests for all requests",
					"pm.test(\"Response time is less than 5000ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"pm.test(\"Response has Content-Type header\", function () {",
					"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"});",
					"",
					"pm.test(\"Response is valid JSON\", function () {",
					"    pm.response.to.be.json;",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "apiVersion",
			"value": "v1",
			"type": "string"
		}
	]
}